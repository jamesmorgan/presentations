{
    // Enforcing options

    "bitwise"       : true, // true = flag bitwise operators which is probably a mistake
    "camelcase"     : true, // true = require camelCase for all variable names
    "curly"         : true, // require curly brackets, even for blocks with only one statement
    "es3"           : false, // ecmascript support spec, not sure what this should be
    "freeze"        : true, // prohibits overwriting prototypes of native objects
    "newcap"        : true, // require capitalization for names of constructor functions
    "noempty"       : true, // prohibits empty blocks
    "nonbsp"        : true, // warns about "non-breaking whitespace" characters
    "nonew"         : true, // prohibits the use of constructor functions for side-effects
    "plusplus"      : false, // true = prohibits the use of unary ++ and -- operators
    "quotmark"      : true, // true = flags mixed quotes '' ""
    "predef"        : [     // declare globals to consider as defined, other than those defined in Environment section
        "_",
        "App", "angular",
        "describe", "expect", "assert", "beforeEach", "afterEach"
    ],
    "unused"        : true, // true = flag unused variables
    "strict"        : true, // true = require 'use strict'
    "trailing"      : true, // true = forbit trailing whitespace
    "maxparams"     : 3, // maximum number of function parameters, not sure what the benefit here would be
    "maxdepth"      : 2, // max nesting depth, may relax later
    "maxstatements" : 25, // max number of statements per function
    "maxcomplexity" : 5, // set max cyclomatic complexity
    "maxlen"        : 140, // max line length, dont really like this one much, going big

    // The Good Parts.
    "asi"           : true,  // Tolerate Automatic Semicolon Insertion (no semicolons).
    "laxbreak"      : true,   // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "boss"          : false,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "eqeqeq"        : true,   // Require triple equals i.e. `===`.
    "eqnull"        : false,  // Tolerate use of `== null`.
    "evil"          : false,  // Tolerate use of `eval`.
    "expr"          : true,  // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,  // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : true,   // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : true,   // Prohipit variable use before definition.
    "loopfunc"      : false,  // Allow functions to be defined within loops.
    "noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
    "scripturl"     : true,   // Tolerate script-targeted URLs.
    "shadow"        : false,  // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "supernew"      : false,  // Tolerate `new function () { ... };` and `new Object;`.
    "undef"         : true,   // Require all non-global variables be declared before they are used.
    "indent"        : 4,       // Specify indentation spacing
    "white"         : false,  // Check against strict whitespace and indentation rules.

    // Relaxing options

    "debug"         : false, // true = ignore "debugger" statements, I never user this
    "esnext"        : true, // true = tells JSHint that your code uses ECMAScript 6 specific syntax
    "funcscope"     : false, // true = suppresses warnings about accessing variables defined out of scope
    "gcl"           : true, // true = compatible with Google Closure Compiler
    "globalstrict"  : false, // true = suppress global var warnings, being ignored?
    "iterator"      : false, // true = suppresses warnings about the __iterator__ property
    "lastsemic"     : false, // true = suppresses warnings about missing semicolons for the last statement in a one-line block
    "laxcomma"      : false, // true =  suppresses warnings about comma-first coding style
    "maxerr"        : 25, // set the maximum amount of warnings for jshint
    "moz"           : false, // true = tells JSHint that your code uses Mozilla JavaScript extensions
    "multistr"      : false, // true = suppresses warnings about multi-line strings
    "notypeof"      : false, // true = suppresses warnings about the use of script-targeted URLs
    "proto"         : false, // true = suppresses warnings about the __proto__ property
    "smarttabs"     : false, // true = suppresses warnings about mixed tabs and spaces
    "sub"           : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "validthis"     : false, // true = suppresses warnings about possible strict violations
    "noyield"       : false, // true = suppresses warnings about generator functions with no yield statement in them
    "nomen"         : true,   // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,  // Allow only one `var` statement per function.

    // Environments
    // These options pre-define global variables that are exposed by popular JavaScript libraries and runtime environmentsâ€”such as browser or node.js.

    "browser"       : false, // Standard browser globals e.g. `window`, `document`.
    "couch"         : false, // Enable globals exposed by CouchDB.
    "devel"         : false, // Allow development statements e.g. `console.log();`.
    "dojo"          : false, // Enable globals exposed by Dojo Toolkit.
    "jquery"        : false, // Enable globals exposed by jQuery JavaScript library.
    "mootools"      : false, // Enable globals exposed by MooTools JavaScript framework.
    "node"          : true, // Enable globals available when code is running inside of the NodeJS runtime environment.
    "nonstandard"   : false, // Define non-standard but widely adopted globals such as escape and unescape.
    "phantom"       : false, //?since version? This option defines globals available when your core is running inside of the PhantomJS runtime environment.
    "prototypejs"   : false, // Enable globals exposed by Prototype JavaScript framework.
    "rhino"         : false, // Enable globals available when your code is running inside of the Rhino runtime environment.
    "worker"        : false, //?since version? This option defines globals available when your code is running inside of a Web Worker.
    "wsh"           : false, // Enable globals available when your code is running as a script for the Windows Script Host.
    "yui"           : false //?since version? This option defines globals exposed by the YUI JavaScript framework.

}